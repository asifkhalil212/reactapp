{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mkhalil5\\\\React JS\\\\POC\\\\reactapp\\\\src\\\\restCallTest.jsx\";\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nexport default class MyComponent extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get(\"https://jsonplaceholder.typicode.com/users\").then(result => {\n      this.setState({\n        isLoaded: true,\n        items: result.data\n      });\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      items\n    } = this.state;\n\n    if (error) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 14\n        }\n      }, \"Error: \", error.message);\n    } else if (!isLoaded) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 14\n        }\n      }, \"Loading...\");\n    } else {\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }\n      }, items.map(item => /*#__PURE__*/React.createElement(\"li\", {\n        key: item.username,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }\n      }, item.username, \": \", item.name)));\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/mkhalil5/React JS/POC/reactapp/src/restCallTest.jsx"],"names":["React","Component","axios","MyComponent","state","error","isLoaded","items","componentDidMount","get","then","result","setState","data","render","message","map","item","username","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,MAAMC,WAAN,SAA0BF,SAA1B,CAAoC;AAAA;AAAA;AAAA,SACjDG,KADiD,GACzC;AACNC,MAAAA,KAAK,EAAE,IADD;AAENC,MAAAA,QAAQ,EAAE,KAFJ;AAGNC,MAAAA,KAAK,EAAE;AAHD,KADyC;AAAA;;AAOjDC,EAAAA,iBAAiB,GAAG;AAClBN,IAAAA,KAAK,CAACO,GAAN,CAAU,4CAAV,EAAwDC,IAAxD,CACEC,MAAM,IAAI;AACR,WAAKC,QAAL,CAAc;AACZN,QAAAA,QAAQ,EAAE,IADE;AAEZC,QAAAA,KAAK,EAAEI,MAAM,CAACE;AAFF,OAAd;AAID,KANH,EAOE;AACA;AACA;AACAR,IAAAA,KAAK,IAAI;AACP,WAAKO,QAAL,CAAc;AACZN,QAAAA,QAAQ,EAAE,IADE;AAEZD,QAAAA;AAFY,OAAd;AAID,KAfH;AAiBD;;AAEDS,EAAAA,MAAM,GAAG;AACP,UAAM;AAAET,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA;AAAnB,QAA6B,KAAKH,KAAxC;;AACA,QAAIC,KAAJ,EAAW;AACT,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAaA,KAAK,CAACU,OAAnB,CAAP;AACD,KAFD,MAEO,IAAI,CAACT,QAAL,EAAe;AACpB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD,KAFM,MAEA;AACL,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGC,KAAK,CAACS,GAAN,CAAUC,IAAI,iBACb;AAAI,QAAA,GAAG,EAAEA,IAAI,CAACC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,IAAI,CAACC,QADR,QACoBD,IAAI,CAACE,IADzB,CADD,CADH,CADF;AASD;AACF;;AA5CgD","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from 'axios';\r\n\r\nexport default class MyComponent extends Component {\r\n  state = {\r\n    error: null,\r\n    isLoaded: false,\r\n    items: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios.get(\"https://jsonplaceholder.typicode.com/users\").then(\r\n      result => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          items: result.data\r\n        });\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      error => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          error\r\n        });\r\n      }\r\n      );\r\n  }\r\n\r\n  render() {\r\n    const { error, isLoaded, items } = this.state;\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      return (\r\n        <ul>\r\n          {items.map(item => (\r\n            <li key={item.username}>\r\n              {item.username}: {item.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}